{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ACA-Py Minimal Example (AME)","text":"<p>The ACA\u2011Py Minimal Example (AME) is a streamlined, containerized toolkit for developers and integration engineers working with the the OpenWallet Foundation's ACA\u2011Py digital trust agent. It\u2019s ideal for those who want to quickly reproduce bugs, test features, or experiment with protocols without navigating complex infrastructure setup. By providing pre-configured Docker environments, a simple \u201chackable\u201d controller API, and ready\u2011to\u2011run protocol scenarios (like issuing credentials or establishing DID\u2011based connections), AME accelerates feedback loops, makes debugging more efficient, and simplifies collaboration. Whether you\u2019re testing edge\u2011case behaviors, executing integration tests, or demonstrating functionality, this minimal setup keeps focus on core interactions with ACA\u2011Py\u2014rather than managing deployment overhead.</p> <ul> <li>Who it\u2019s for: Developers and integration engineers working with ACA\u2011Py.</li> <li>Why it\u2019s useful: Simplifies and accelerates testing, debugging, and experimentation.</li> <li>Key benefits:</li> <li>Fully containerized setup\u2014no manual environment configuration.</li> <li>A flexible, lightweight controller to drive Admin API and event flows.</li> <li>Prebuilt examples covering common use cases (e.g., DID exchange, credential issuance, proof presentation) to get started immediately.</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<p>If you'd like to create a minimal reproducible example, simply fork this repo, and copy the most relevant one in the <code>examples</code> directory or use the template found in <code>examples/template</code>.</p> <p>Each example is a script that implements a simple interaction between two (or more) ACA-Py agents with the goal of testing a feature. It is recommended that examples contributed to this repository be as self-contained as possible.</p>"},{"location":"#ame-goals","title":"AME Goals","text":"<ul> <li>Minimal setup (everything runs in containers)</li> <li>Ideal for quickly reproducing an issue or demonstrating a feature by writing simple   scripts or pytest tests.</li> <li>Generator for common agent setups (<code>Dockerfile</code>s + <code>docker-compose.yml</code>). For example:</li> <li>Alice, Bob</li> <li>Alice, Bob, Mediator</li> <li>Issuer, Holder, Verifier</li> <li>Endorser, Issuer, Holder, Verifier</li> <li>ACA-Py, Echo (Remote controlled static agent; for sending raw messages)</li> <li>Any combination of the above with a specified set of plugins installed.</li> <li>Any combination of the above with tails server and/or tunnel</li> <li>etc.</li> </ul> <p>We're still working on achieving these goals, particularly the generator.</p> <p>Contributions are welcome. In particular, please feel free to contribute any examples you create that might help others. These should follow the format found in the <code>template</code> example: a docker-compose file, an <code>example.py</code> script containing the use-case specific details, and a <code>README.md</code> describing the example (as well as any additional scripts/Dockerfiles/etc. needed).</p>"},{"location":"#controller","title":"Controller","text":"<p>Included in this repo is a simple \"hackable\" ACA-Py controller. The controller provides an interface for interacting with an ACA-Py instance. The primary operations are:</p> <ul> <li>HTTP Request methods: <code>get</code>, <code>post</code>, <code>put</code>, <code>delete</code></li> <li><code>event</code>, <code>event_with_values</code>, <code>event_queue</code> - await and retrieve   events emitted by the agent</li> </ul> <p>The controller is inspired by a number of similar efforts, including the auto-generated client libraries acapy-client and aries-cloudcontroller, the acapy-revocation-demo (which is often used internally at Indicio exactly the way we intend this repo to be used), and the integration test controllers in ACA-Py's BDD tests.</p> <p>The AME controller differs from these in a few key ways:</p> <ul> <li>The AME controller is intended to be as simple and hackable as possible. Specific   operations like creating an out-of-band connection or issuing a credential are   not implemented directly on the controller. Instead, the building blocks for   these operations are made available so the library consumer can tweak   parameters and request bodies directly. This allows the consumer to have the   flexibility to hit edge cases or demonstrate changes without needing to   implement a new request method or generate a new client.</li> <li>Models for request bodies are included but optional. This helps strike a   balance between flexibility and ease of use that isn't achieved in an   interface like the one provided by the acapy-revocation-demo controller, for   instance. In addition to the included models, a dictionary,   dataclass (from python's standard <code>dataclasses</code>), or a class/instance   implementing a <code>serialize</code> and <code>deserialize</code> method can be used as the request   body.</li> <li>Deserialization (and typing) of response bodies is built into all operations.   This makes it far more convenient to validate and access the data of an ACA-Py   response. This is done by passing the desired response type to the operation.   Supported types match the supported auto-serialzation types for request   bodies: the included models, dataclasses, and classes   implementing <code>serialize</code> and <code>deserialize</code>.</li> <li>This controller provides a system for capturing webhooks/events that is well   suited for a testing or demonstration scenario.</li> </ul>"},{"location":"#protocols","title":"Protocols","text":"<p>Several helper methods are included in the protocols.py script that are useful for causing two ACA-Py instances to engage in a protocol. The <code>Controller</code> instances connected to the ACA-Py instances are used to orchestrate each of the Admin API calls required and await the expected webhooks to see the given protocol through to completion.</p> <p>Some of the implemented protocols include:</p> <ul> <li>DID Exchange (<code>didexchange</code>) - Connect two ACA-Py instances using OOB + DID Exchange and return the connection records from each instance.</li> <li>Issue Credential v2: Indy (<code>indy_issue_credential_v2</code>) - Conduct a credential issuance of an AnonCreds credential with one ACA-Py instance acting as the issuer and the other as the holder.</li> <li>Present Proof v2: Indy (<code>indy_present_proof_v2</code>) - Conduct a presentation request of an AnonCreds credential with one ACA-Py instance acting as the verifier and the other as the prover.</li> <li>Issue Credential v2: json-ld (<code>jsonld_issue_credential</code>) - Conduct a credential issuance of an LDP-VC credential with one ACA-Py instance acting as the issuer and the other as the holder.</li> <li>Present Proof v2: json-ld (<code>jsonld_present_proof</code>) - Conduct a presentation request of an LDP-VC credential with one ACA-Py instance acting as the verifier and the other as the prover.</li> </ul> <p>In addition to protocol helpers, some other common admin operations have some automated helpers:</p> <ul> <li>Indy Onboarding (<code>indy_anoncred_onboard</code>) - Auto-accept the TAA of the Indy network, create a DID, and anchor it to the network. The helper will attempt to automatically detect the connected network and determine the URL of the \"self-serve\" endpoint for publishing an Endorser DID. All VON Network instances (that exposes a <code>register</code> endpoint) and Indicio Test/Demo Networks are supported. <p>[!WARNING] By using this tool, you are expressing your acceptance of the Transaction Author Agreement of the network to which you are connecting.</p> </li> <li>Indy AnonCred credential artifact creation (<code>indy_anoncred_credential_artifacts</code>) - Creates a schema and credential definition for that schema. Supports setting revocation on the resulting cred def.</li> </ul>"},{"location":"#models","title":"Models","text":"<p>This project includes Pydantic Models auto-generated from ACA-Py's OpenAPI specification. These models provide a way to more easily access the information returned from ACA-Py's Admin API or to add type safety to the requests being made to the Admin API. To use these models, the <code>models</code> extra must be installed, e.g.:</p> <pre><code>pip install acapy-controller[models]\n</code></pre> <p>The models can be useful on their own. It is particularly useful to use them for the <code>response</code> parameter of an Admin API request or as the <code>event_type</code> parameter when awaiting an event:</p> <pre><code>from acapy_controller import Controller\nfrom acapy_controller.models import ConnectionList, ConnRecord\n\nasync def main():\n    async with Controller(base_url=\"http://acapy.example.com/admin\") as agent:\n        conns = await agent.get(\n            \"/connections\",\n            response=ConnectionList\n        )\n        assert conns.results\n\n        # ...\n\n        conn = await agent.event_with_values(\n            topic=\"connections\",\n            state=\"active\",\n            event_type=ConnRecord\n        )\n        assert conn.connection_id\n</code></pre> <p>This strategy is quite effective; however, it is common to use this library with an as of yet unreleased version of ACA-Py where an updated OpenAPI specification is not yet available. Because of this, usage of these models is purely optional to enable greater flexibility. If <code>response</code> or <code>event_type</code> are omitted from the above example, <code>conns</code> and <code>conn</code> will be simple dictionaries.</p> <p>Because of the need to work with various ACA-Py versions, released and unreleased, the protocol helpers depend on a different set of models that minimize the amount of validation to the bare minimum required to complete the exchange. This should help keep the protocol helpers functioning across ACA-Py versions except when a more significant breaking change occurs.</p>"},{"location":"#events","title":"Events","text":"<p>The Controller can be used as a simple HTTP client to make Admin API requests to ACA-Py. For more interesting exchanges, though, ACA-Py depends on reporting events asynchronously to its controller, usually via posted webhooks. ACA-Py also supports delivering these events to connected WebSockets. Using a WebSocket and an \"Asynchronous Selective Queue\", the Controller also exposes a versatile interface for expecting and handling these webhook events.</p> <p>See the example above under \"Models\" or protocols.py for how this can be used.</p>"},{"location":"#examples","title":"Examples","text":"<p>A number of examples can be found in the AME repository's examples directory. Each of these contains a <code>docker-compose.yml</code> and a <code>example.py</code>. You can run each example by <code>cd</code>ing into the directory and running:</p> <pre><code>cd examples/simple\ndocker-compose run example\n# Clean up\ndocker-compose down -v\n</code></pre>"},{"location":"#instructions-on-running-tests","title":"Instructions on Running Tests","text":"<p>There are some automated tests used to validate the builtin protocol helpers.</p> <p>To run the tests:</p> <pre><code>docker-compose run tests\n</code></pre> <p>This should build everything as needed. If not:</p> <pre><code>docker-compose build\n</code></pre> <p>To stop and remove all running containers:</p> <pre><code>docker-compose down\n</code></pre> <pre><code>docker-compose build\n</code></pre> <p>To stop and remove all running containers:</p> <pre><code>docker-compose down\n</code></pre> <p>Note: You shouldn't have to run <code>docker-compose down</code> between tests the way things are currently set up but doing so should give the cleanest state possible for inspection after the tests complete</p>"},{"location":"#testing-the-examples","title":"Testing the Examples","text":"<p>Pytest has been configured to run checks on the examples. You can run these with:</p> <pre><code>poetry run pytest -m examples\n</code></pre> <p>This will run the <code>example</code> service of each docker-compose file in each directory inside of the <code>examples</code> folder.</p>"},{"location":"#custom-aca-py-imagesversions","title":"Custom ACA-Py Images/Versions","text":"<p>Presently, a specific version ACA-Py is used, using the images published to the ACA-Py repository. This can be changed by modifying the build parameter of the ACA-Py services. A commented out example is included. You can adjust <code>acapy_url</code> as needed. If you do change the <code>acapy_url</code>, you need to make sure you manually trigger a build with <code>docker-compose build</code>.</p>"},{"location":"#instructions-on-running-with-a-local-image","title":"Instructions on Running with a Local Image","text":"<p>One can also build the docker images from a local ACA-Py repo contents, if so desired. </p> <p>From the root of the ACA-Py repo, do:</p> <pre><code>docker build -t acapy-test -f docker/Dockerfile.run .\n</code></pre> <p>Then remove the\u00a0build\u00a0mapping from the ACA-Py services (back in the acapy-minimal-example repo) and replace it with\u00a0<code>image: acapy-test</code></p>"},{"location":"CONTRIBUTING/","title":"How to Contribute","text":""},{"location":"CONTRIBUTING/#how-to-contribute","title":"How to contribute","text":"<p>You are encouraged to contribute to the repository by forking and submitting a pull request.</p> <p>For significant changes, please open an issue first to discuss the proposed changes to avoid re-work.</p>"},{"location":"DOCSITE/","title":"ACA-Py Minimal Example Documentation","text":"<p>The documentation site for the ACA-Py Minimal Example can be found at: https://me.aca-py.org.</p>"},{"location":"DOCSITE/#managing-the-documentation-site","title":"Managing the Documentation Site","text":"<p>The documentation site is sourced from this repo and generated by the <code>publish-docs</code> GitHub Action. That action:</p> <ul> <li>Checkouts out the repo at <code>main</code></li> <li>Installs Mkdocs Material</li> <li>Runs the script in the repo <code>setupDocs.sh</code>, which<ul> <li>Creates the <code>docs</code> folder</li> <li>Populates the <code>docs</code> with all of the root level Markdown files</li> <li>Creates a folder for each plugin and copies it's <code>README.md</code></li> <li>Generates a complete <code>mkdocs.yml</code> file with navigation</li> </ul> </li> <li>Runs the <code>mkdocs</code> <code>mike</code> extension to generate the site to the <code>gh-pages</code> branch for deployment with GitHub pages</li> </ul> <p>If you want to change how the doc site looks, edit the <code>setupDocs.sh</code> file and the <code>mkdocs.yml</code> portion of the script for both look and feel and navigation. Most of the script is just to redirect a plain text into the <code>mkdocs.yml</code> file, although there is a little bash script to, for example, generate the navigation for all of the examples. If you want to edit the content displayed on the site, edit the markdown files in this repo.</p>"},{"location":"DOCSITE/#testing-the-documentation-site","title":"Testing the Documentation Site","text":"<p>To test the documentation site locally, follow the instructions on the Mkdocs Material to install <code>mkdocs</code> locally and run it.  When you are ready, run:</p> <pre><code>./setupDocs.sh\nmkdocs\n</code></pre> <p>You should have the site up at <code>http://localhost:8000/</code>.</p> <p>The <code>/docs</code> folder and <code>mkdocs.yml</code> file are <code>.gitignore</code>d in this repo, but if you want to get rid of them, you can use the following to clean them up.</p> <pre><code>./setupDocs.sh clean\n</code></pre>"},{"location":"LICENSE/","title":"License","text":"<pre><code>                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/\n</code></pre> <p>TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION</p> <ol> <li> <p>Definitions.</p> <p>\"License\" shall mean the terms and conditions for use, reproduction,   and distribution as defined by Sections 1 through 9 of this document.</p> <p>\"Licensor\" shall mean the copyright owner or entity authorized by   the copyright owner that is granting the License.</p> <p>\"Legal Entity\" shall mean the union of the acting entity and all   other entities that control, are controlled by, or are under common   control with that entity. For the purposes of this definition,   \"control\" means (i) the power, direct or indirect, to cause the   direction or management of such entity, whether by contract or   otherwise, or (ii) ownership of fifty percent (50%) or more of the   outstanding shares, or (iii) beneficial ownership of such entity.</p> <p>\"You\" (or \"Your\") shall mean an individual or Legal Entity   exercising permissions granted by this License.</p> <p>\"Source\" form shall mean the preferred form for making modifications,   including but not limited to software source code, documentation   source, and configuration files.</p> <p>\"Object\" form shall mean any form resulting from mechanical   transformation or translation of a Source form, including but   not limited to compiled object code, generated documentation,   and conversions to other media types.</p> <p>\"Work\" shall mean the work of authorship, whether in Source or   Object form, made available under the License, as indicated by a   copyright notice that is included in or attached to the work   (an example is provided in the Appendix below).</p> <p>\"Derivative Works\" shall mean any work, whether in Source or Object   form, that is based on (or derived from) the Work and for which the   editorial revisions, annotations, elaborations, or other modifications   represent, as a whole, an original work of authorship. For the purposes   of this License, Derivative Works shall not include works that remain   separable from, or merely link (or bind by name) to the interfaces of,   the Work and Derivative Works thereof.</p> <p>\"Contribution\" shall mean any work of authorship, including   the original version of the Work and any modifications or additions   to that Work or Derivative Works thereof, that is intentionally   submitted to Licensor for inclusion in the Work by the copyright owner   or by an individual or Legal Entity authorized to submit on behalf of   the copyright owner. For the purposes of this definition, \"submitted\"   means any form of electronic, verbal, or written communication sent   to the Licensor or its representatives, including but not limited to   communication on electronic mailing lists, source code control systems,   and issue tracking systems that are managed by, or on behalf of, the   Licensor for the purpose of discussing and improving the Work, but   excluding communication that is conspicuously marked or otherwise   designated in writing by the copyright owner as \"Not a Contribution.\"</p> <p>\"Contributor\" shall mean Licensor and any individual or Legal Entity   on behalf of whom a Contribution has been received by Licensor and   subsequently incorporated within the Work.</p> </li> <li> <p>Grant of Copyright License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       copyright license to reproduce, prepare Derivative Works of,       publicly display, publicly perform, sublicense, and distribute the       Work and such Derivative Works in Source or Object form.</p> </li> <li> <p>Grant of Patent License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       (except as stated in this section) patent license to make, have made,       use, offer to sell, sell, import, and otherwise transfer the Work,       where such license applies only to those patent claims licensable       by such Contributor that are necessarily infringed by their       Contribution(s) alone or by combination of their Contribution(s)       with the Work to which such Contribution(s) was submitted. If You       institute patent litigation against any entity (including a       cross-claim or counterclaim in a lawsuit) alleging that the Work       or a Contribution incorporated within the Work constitutes direct       or contributory patent infringement, then any patent licenses       granted to You under this License for that Work shall terminate       as of the date such litigation is filed.</p> </li> <li> <p>Redistribution. You may reproduce and distribute copies of the       Work or Derivative Works thereof in any medium, with or without       modifications, and in Source or Object form, provided that You       meet the following conditions:</p> <p>(a) You must give any other recipients of the Work or       Derivative Works a copy of this License; and</p> <p>(b) You must cause any modified files to carry prominent notices       stating that You changed the files; and</p> <p>\u00a9 You must retain, in the Source form of any Derivative Works       that You distribute, all copyright, patent, trademark, and       attribution notices from the Source form of the Work,       excluding those notices that do not pertain to any part of       the Derivative Works; and</p> <p>(d) If the Work includes a \"NOTICE\" text file as part of its       distribution, then any Derivative Works that You distribute must       include a readable copy of the attribution notices contained       within such NOTICE file, excluding those notices that do not       pertain to any part of the Derivative Works, in at least one       of the following places: within a NOTICE text file distributed       as part of the Derivative Works; within the Source form or       documentation, if provided along with the Derivative Works; or,       within a display generated by the Derivative Works, if and       wherever such third-party notices normally appear. The contents       of the NOTICE file are for informational purposes only and       do not modify the License. You may add Your own attribution       notices within Derivative Works that You distribute, alongside       or as an addendum to the NOTICE text from the Work, provided       that such additional attribution notices cannot be construed       as modifying the License.</p> <p>You may add Your own copyright statement to Your modifications and   may provide additional or different license terms and conditions   for use, reproduction, or distribution of Your modifications, or   for any such Derivative Works as a whole, provided Your use,   reproduction, and distribution of the Work otherwise complies with   the conditions stated in this License.</p> </li> <li> <p>Submission of Contributions. Unless You explicitly state otherwise,       any Contribution intentionally submitted for inclusion in the Work       by You to the Licensor shall be under the terms and conditions of       this License, without any additional terms or conditions.       Notwithstanding the above, nothing herein shall supersede or modify       the terms of any separate license agreement you may have executed       with Licensor regarding such Contributions.</p> </li> <li> <p>Trademarks. This License does not grant permission to use the trade       names, trademarks, service marks, or product names of the Licensor,       except as required for reasonable and customary use in describing the       origin of the Work and reproducing the content of the NOTICE file.</p> </li> <li> <p>Disclaimer of Warranty. Unless required by applicable law or       agreed to in writing, Licensor provides the Work (and each       Contributor provides its Contributions) on an \"AS IS\" BASIS,       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or       implied, including, without limitation, any warranties or conditions       of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A       PARTICULAR PURPOSE. You are solely responsible for determining the       appropriateness of using or redistributing the Work and assume any       risks associated with Your exercise of permissions under this License.</p> </li> <li> <p>Limitation of Liability. In no event and under no legal theory,       whether in tort (including negligence), contract, or otherwise,       unless required by applicable law (such as deliberate and grossly       negligent acts) or agreed to in writing, shall any Contributor be       liable to You for damages, including any direct, indirect, special,       incidental, or consequential damages of any character arising as a       result of this License or out of the use or inability to use the       Work (including but not limited to damages for loss of goodwill,       work stoppage, computer failure or malfunction, or any and all       other commercial damages or losses), even if such Contributor       has been advised of the possibility of such damages.</p> </li> <li> <p>Accepting Warranty or Additional Liability. While redistributing       the Work or Derivative Works thereof, You may choose to offer,       and charge a fee for, acceptance of support, warranty, indemnity,       or other liability obligations and/or rights consistent with this       License. However, in accepting such obligations, You may act only       on Your own behalf and on Your sole responsibility, not on behalf       of any other Contributor, and only if You agree to indemnify,       defend, and hold each Contributor harmless for any liability       incurred by, or claims asserted against, such Contributor by reason       of your accepting any such warranty or additional liability.</p> </li> </ol> <p>END OF TERMS AND CONDITIONS</p> <p>APPENDIX: How to apply the Apache License to your work.</p> <pre><code>  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"[]\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.\n</code></pre> <p>Copyright [yyyy] [name of copyright owner]</p> <p>Licensed under the Apache License, Version 2.0 (the \"License\");    you may not use this file except in compliance with the License.    You may obtain a copy of the License at</p> <pre><code>   http://www.apache.org/licenses/LICENSE-2.0\n</code></pre> <p>Unless required by applicable law or agreed to in writing, software    distributed under the License is distributed on an \"AS IS\" BASIS,    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    See the License for the specific language governing permissions and    limitations under the License.</p>"},{"location":"MAINTAINERS/","title":"Maintainers","text":""},{"location":"MAINTAINERS/#maintainer-scopes-github-roles-and-github-teams","title":"Maintainer Scopes, GitHub Roles and GitHub Teams","text":"<p>The Maintainers of this repo, defined as GitHub users with escalated privileges in the repo, are managed in the OpenWallet Foundation's \"governance\" repo's config.yaml file. Consult that to see:</p> <ul> <li>What teams have escalated privileges to this repository.</li> <li>What GitHub roles those teams have in the repository.</li> <li>Who are the members of each of those teams.</li> </ul> <p>The actions covered below for becoming and removing are made manifest through PRs to that file.</p>"},{"location":"MAINTAINERS/#the-duties-of-a-maintainer","title":"The Duties of a Maintainer","text":"<p>Maintainers are expected to perform the following duties for this repository. The duties are listed in more or less priority order:</p> <ul> <li>Review, respond, and act on any security vulnerabilities reported against the repository.</li> <li>Review, provide feedback on, and merge or reject GitHub Pull Requests from   Contributors.</li> <li>Review, triage, comment on, and close GitHub Issues   submitted by Contributors.</li> <li>When appropriate, lead/facilitate architectural discussions in the community.</li> <li>When appropriate, lead/facilitate the creation of a product roadmap.</li> <li>Create, clarify, and label issues to be worked on by Contributors.</li> <li>Ensure that there is a well defined (and ideally automated) product test and   release pipeline, including the publication of release artifacts.</li> <li>When appropriate, execute the product release process.</li> <li>Maintain the repository CONTRIBUTING.md file and getting started documents to   give guidance and encouragement to those wanting to contribute to the product, and those wanting to become maintainers.</li> <li>Contribute to the product via GitHub Pull Requests.</li> <li>Monitor requests from the Hyperledger Technical Oversight Committee about the contents and management of Hyperledger repositories, such as branch handling, required files in repositories and so on.</li> <li>Contribute to the Hyperledger Project's Quarterly Report.</li> </ul>"},{"location":"MAINTAINERS/#becoming-a-maintainer","title":"Becoming a Maintainer","text":"<p>This community welcomes contributions. Interested contributors are encouraged to progress to become maintainers. To become a maintainer the following steps occur, roughly in order.</p> <ul> <li>The proposed maintainer establishes their reputation in the community,   including authoring five (5) significant merged pull requests, and expresses   an interest in becoming a maintainer for the repository.</li> <li>An issue is created to add the proposed maintainer to the list of active maintainers.</li> <li>The issue is authored by an existing maintainer or has a comment on the PR from an existing maintainer supporting the proposal.</li> <li>The issue is authored by the proposed maintainer or has a comment on the issue from the proposed maintainer confirming their interest in being a maintainer.</li> <li>The issue or comment from the proposed maintainer must include their     willingness to be a long-term (more than 6 month) maintainer.</li> <li>Once the issue and necessary comments have been received, an approval timeframe begins.</li> <li>The issue MUST be communicated on all appropriate communication channels, including relevant community calls, chat channels and mailing lists. Comments of support from the community are welcome.</li> <li>The issue is approved and the proposed maintainer becomes a maintainer if either:</li> <li>Two weeks have passed since at least three (3) Maintainer issue approvals have been recorded, OR</li> <li>An absolute majority of maintainers have approved the issue.</li> <li>If the issue does not get the requisite approvals, it may be closed.</li> <li>Once the add maintainer issue has been approved, the necessary updates to the GitHub Teams are made via a PR to the Hyperledger \"governance\" repo's access-control.yaml file.</li> </ul>"},{"location":"MAINTAINERS/#removing-maintainers","title":"Removing Maintainers","text":"<p>Being a maintainer is not a status symbol or a title to be carried indefinitely. It will occasionally be necessary and appropriate to move a maintainer to emeritus status. This can occur in the following situations:</p> <ul> <li>Resignation of a maintainer.</li> <li>Violation of the Code of Conduct warranting removal.</li> <li>Inactivity.</li> <li>A general measure of inactivity will be no commits or code review comments     for one reporting quarter. This will not be strictly enforced if     the maintainer expresses a reasonable intent to continue contributing.</li> <li>Reasonable exceptions to inactivity will be granted for known long term     leave such as parental leave and medical leave.</li> <li>Other circumstances at the discretion of the other Maintainers.</li> </ul> <p>The process to move a maintainer from active to emeritus status is comparable to the process for adding a maintainer, outlined above. In the case of voluntary resignation, the Pull Request can be merged following a maintainer issue approval. If the removal is for any other reason, the following steps SHOULD be followed:</p> <ul> <li>An issue is created to move the maintainer to the list of emeritus maintainers.</li> <li>The issue is authored by, or has a comment supporting the proposal from, an existing maintainer or Hyperledger GitHub organization administrator.</li> <li>Once the issue and necessary comments have been received, the approval timeframe begins.</li> <li>The issue MAY be communicated on appropriate communication channels, including relevant community calls, chat channels and mailing lists.</li> <li>The issue is approved and the maintainer transitions to maintainer emeritus if:</li> <li>The issue is approved by the maintainer to be transitioned, OR</li> <li>Two weeks have passed since at least three (3) Maintainer issue approvals have been recorded, OR</li> <li>An absolute majority of maintainers have approved the issue.</li> <li>If the issue does not get the requisite approvals, it may be closed.</li> <li>Once the remove maintainer issue has been approved, the necessary updates to the GitHub Teams are made via a PR to the Hyperledger \"governance\" repo's access-control.yaml file.</li> </ul> <p>Returning to active status from emeritus status uses the same steps as adding a new maintainer. Note that the emeritus maintainer already has the 5 required significant changes as there is no contribution time horizon for those.</p>"},{"location":"examples/anoncreds_endpoints/","title":"Anoncreds Endpoints","text":"<p>Test credential issuance and revocation with <code>wallet-type=askar-anoncreds</code>.</p>"},{"location":"examples/connection_reuse/","title":"Connection Reuse","text":"<p>Connects two ACA-Py instances using an existing connection.</p>"},{"location":"examples/connectionless/","title":"Connectionless","text":"<p>Test connectionless credential exchange using both v1 and v2 credentials.</p>"},{"location":"examples/json_ld/","title":"JSON-LD","text":"<p>Create, issue, and verify a JSON-LD credential.</p>"},{"location":"examples/mediation/","title":"Mediation","text":"<p>Test connection of two ACA-Py instances using a mediator.</p>"},{"location":"examples/mt_anoncreds_endorser/","title":"Multi-Tenant Anoncreds Endorser","text":"<p>Ensure that Anoncreds endorser (<code>agency</code>) is able to endorse multiple sub-wallets.</p>"},{"location":"examples/multitenancy/","title":"Multitenancy","text":"<p>Test credential issuance between sub-wallets.</p>"},{"location":"examples/presenting_revoked_credential/","title":"Presenting Revoked Credential","text":"<p>Issue and revoke an Anoncreds credential, and ensure that presentation fails.</p>"},{"location":"examples/self_attested/","title":"Self-Attested","text":"<p>Create and present self-attested credential.</p>"},{"location":"examples/template/","title":"Template","text":"<p>A template for creating examples in AME. Simply copy this folder into <code>examples</code>, rename, and modify <code>example.py</code> and the docker-compose as necessary. There are several examples there that you can use for inspiration. This example simply connects two ACA-Py instances.</p> <p>To run: <pre><code>docker-compose build\ndocker-compose run --rm example\n# Clean up\ndocker-compose down -v\n</code></pre></p>"},{"location":"examples/tunnels/","title":"Tunnels","text":"<p>Issue, present, revoke a credential thourgh an agent tunnel. See https://github.com/Indicio-tech/agent-tunnel.</p>"}]}